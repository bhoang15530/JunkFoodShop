
<div class="row w-100 mx-0" style="margin-top: 100px">
    <div class="col-lg-4 mx-auto">
        <div class="auth-form-light text-left py-5 px-4 px-sm-5">
            <div class="brand-logo">
                <img src="~/images/logo.svg" alt="logo">
            </div>
            <h6 class="font-weight-light">Don't have an acocunt? Create now.</h6>
            @if (!string.IsNullOrEmpty(ViewBag.Error))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>@ViewBag.Error</strong>
                    <button type="button" class="btn btn-close" data-bs-dismiss="alert" aria-label="Close"><i class="bi bi-x-square-fill"></i></button>
                </div>
            }
            <form id="sign-up-form" class="pt-3" asp-action="SignUp" asp-controller="Account">
                <div class="form-group">
                    <input type="text" class="form-control form-control-lg" name="Username" id="Username" placeholder="Username">
                    <span class="form-message"></span>
                </div>
                <div class="form-group">
                    <input type="text" class="form-control form-control-lg" name="FullName" id="FullName" placeholder="Full Name">
                    <span class="form-message"></span>
                </div>
                <div class="form-group">
                    <input type="text" class="form-control form-control-lg" name="Email" id="Email" placeholder="Email">
                    <span class="form-message"></span>
                </div>
                <div class="form-group">
                    <input type="number" class="form-control form-control-lg w-100" min="0" name="PhoneNumber" id="PhoneNumber" placeholder="Phone Number">
                    <span class="form-message"></span>
                </div>
                <div class="form-group">
                    <input type="password" class="form-control form-control-lg" name="Password" id="Password" placeholder="Password">
                    <span class="form-message"></span>
                </div>
                <div class="form-group">
                    <input type="password" class="form-control form-control-lg" name="ConfirmPassword" id="ConfirmPassword" placeholder="Confirm Your Password">
                    <span class="form-message"></span>
                </div>
                <div class="mt-3">
                    <button type="submit" class="btn btn-block btn-primary btn-lg font-weight-medium auth-form-btn">SIGN UP</button>
                </div>
                <div class="text-center mt-4 font-weight-light">
                    Have an account? <a asp-action="SignIn" asp-controller="Account" class="text-primary">Sign in now!</a>
                </div>
            </form>
        </div>
    </div>
</div>

@*Phải thêm trực tiếp vào như thế này thì Validator.isPhoneNumber mới chạy ???? Không thêm như này mà thêm bằng 
    <script src="~/js/validator.js"></script> thì không chạy????? :D
*@
<script>
    function Validator(options) {
        var selectorRules = {};
        function validate(inputElement, rule) {
            var errorMessage;
            var errorElement = inputElement.parentElement.querySelector(
                options.errorSelector
            );

            // Lấy ra các rule của selector
            var rules = selectorRules[rule.selector];

            // Lặp qua từng rule và kiểm tra
            // Nếu có lỗi thì dừng kiểm tra
            for (var i = 0; i < rules.length; i++) {
                errorMessage = rules[i](inputElement.value);
                if (errorMessage) break;
            }
            if (errorMessage) {
                errorElement.innerText = errorMessage;
                inputElement.parentElement.classList.add("invalid");
            } else {
                errorElement.innerText = "";
                inputElement.parentElement.classList.remove("invalid");
            }
            return !errorMessage;
        }

        // Lấy element của form
        var formElement = document.querySelector(options.form);
        if (formElement) {
            formElement.onsubmit = function (e) {
                e.preventDefault();

                var isFormValid = true;

                // Thực hiện lặp qua từng rule và validate
                options.rules.forEach((rule) => {
                    var inputElement = formElement.querySelector(rule.selector);
                    var isValid = validate(inputElement, rule);
                    if (!isValid) {
                        isFormValid = false;
                    }
                });

                if (isFormValid) {
                    // Trường hợp submit với JS
                    if (typeof options.onSubmit === "function") {
                        var formEnableInputs = formElement.querySelectorAll(
                            "[name]:not([disable])"
                        );
                        var formValues = Array.from(formEnableInputs).reduce(
                            function (values, input) {
                                return (values[input.name] = input.value) && values;
                            },
                            {}
                        );
                        options.onSubmit(formValues);
                    } else {
                        // Trường hợp submit với hành vi mặc định
                        formElement.submit();
                    }
                }
            };

            // Lặp qua mỗi rule và xử lý (lắng nghe sự kiện blur, input, ...)
            options.rules.forEach((rule) => {
                // Lưu lại các rule cho mỗi input
                if (Array.isArray(selectorRules[rule.selector])) {
                    selectorRules[rule.selector].push(rule.test);
                } else {
                    selectorRules[rule.selector] = [rule.test];
                }

                var inputElement = formElement.querySelector(rule.selector);
                if (inputElement) {
                    // Xử lý trường hợp blur input
                    inputElement.onblur = function () {
                        validate(inputElement, rule);
                    };
                    // Xử lý trường hợp mỗi khi người dùng nhập vào input
                    inputElement.oninput = function () {
                        var errorElement = inputElement.parentElement.querySelector(
                            options.errorSelector
                        );
                        errorElement.innerText = "";
                        inputElement.parentElement.classList.remove("invalid");
                    };
                }
            });
        }
    }

    // Định nghĩa rule:
    // Nguyên tắc các rule:
    // 1. Khi có lỗi => trả ra lỗi
    // 2. Khi hợp lệ => không trả ra gì (undefined)

    Validator.isRequired = function (selector, message) {
        return {
            selector,
            test: function (value) {
                return value.trim()
                    ? undefined
                    : message ?? "Vui lòng nhập trường này";
            },
        };
    };

    Validator.isEmail = function (selector, message) {
        return {
            selector,
            test: function (value) {
                var regex = /^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                return regex.test(value)
                    ? undefined
                    : message ?? "Trường này phải là email";
            },
        };
    };

    Validator.minLength = function (selector, min, message) {
        return {
            selector,
            test: function (value) {
                return value.length >= min
                    ? undefined
                    : message ?? `Vui lòng nhập tối thiểu ${min} ký tự`;
            },
        };
    };

    Validator.isPasswordConfirmed = function (selector, getConfirmValue, message) {
        return {
            selector,
            test: function (value) {
                return value === getConfirmValue()
                    ? undefined
                    : message ?? "Giá trị nhập vào không chính xác";
            },
        };
    };

    Validator.isPhoneNumber = function (selector, number, message) {
        return {
            selector,
            test: function (value) {
                return value.length === number
                    ? undefined
                    : message ?? `Vui lòng nhập đúng ${number} số`;
            },
        };
    };

    Validator.isImageLink = function (selector, message) {
        return {
            selector,
            test: function (value) {
                var regex = /(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|gif|png)/;
                return regex.test(value)
                    ? undefined
                    : message ?? "Trường này phải là liên kết hình ảnh";
            },
        };
    };

</script>

<script>
    Validator({
        form: "#sign-up-form",
        errorSelector: ".form-message",
        rules: [
            Validator.isRequired(
                "#Username",
                "Username is required"
            ),
            Validator.minLength(
                "#Username",
                3,
                "Username must be greater than 3 characters"
            ),
            Validator.isRequired(
                "#FullName",
                "Full Name is required"
            ),
            Validator.minLength(
                "#FullName",
                3,
                "Full name must be greater than 3 characters"
            ),
            Validator.isRequired(
                "#Email",
                "Email is required"
            ),
            Validator.isEmail("#Email", "This field must be an email"),
            Validator.isRequired(
                "#PhoneNumber",
                "Phone Number is required"
            ),
            Validator.isPhoneNumber(
                "#PhoneNumber",
                10,
                "The phone number must be exact 10 characters. Example: 09123456789"
            ),
            Validator.isRequired(
                "#Password",
                "Password is required"
            ),
            Validator.isRequired(
                "#ConfirmPassword",
                "Password is required"
            ),
            Validator.isPasswordConfirmed(
                "#ConfirmPassword",
                function () {
                    return document.querySelector("#sign-up-form #Password")
                        .value;
                },
                "The passwords are not the same!"
            ),
        ],
    });
</script>
<style>
    .form-message {
        color: red;
    }

    
</style>